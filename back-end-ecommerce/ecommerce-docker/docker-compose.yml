version: "3.0"
services:
  keycloak:
    ports:
      - 8082:8082
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
    image: 'quay.io/keycloak/keycloak:26.0.7'
    command: start-dev --http-port=8082
  elasticsearch:
    image: elasticsearch:7.17.24
    container_name: es-container
    environment:
      - ELASTIC_PASSWORD="090224T@n"
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    networks:
      kafka-net:
        ipv4_address: 172.100.0.203
    ports:
      - 9200:9200
    deploy:
      resources:
        limits:
          memory: 4000M
  kibana:
    image: kibana:7.17.24
    container_name: kb-container
    environment:
      - KIBANA_PASSWORD="090224T@n"
      - ELASTICSEARCH_HOSTS=http://es-container:9200
    depends_on:
      - elasticsearch
    networks:
      - kafka-net
    ports:
      - 5601:5601

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-net

  kafdrop:
    image: obsidiandynamics/kafdrop:3.28.0
    networks:
      - kafka-net
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka2:29092,kafka1:29091,kafka3:29093

  kafka1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka1
    container_name: kafka1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29091,OUTSIDE://0.0.0.0:9091
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka1:29091,OUTSIDE://localhost:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENER_NAME_INSIDE: INSIDE
      KAFKA_LISTENER_NAME_OUTSIDE: OUTSIDE
      KAFKA_LISTENER_PORT_INSIDE: 29091
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      kafka-net:
        ipv4_address: 172.100.0.100
    ports:
      - "9091:9091"
      - "29091:29091"


  kafka2:
    image: confluentinc/cp-kafka:latest
    hostname: kafka2
    container_name: kafka2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka2:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENER_NAME_INSIDE: INSIDE
      KAFKA_LISTENER_NAME_OUTSIDE: OUTSIDE
      KAFKA_LISTENER_PORT_INSIDE: 29092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      kafka-net:
        ipv4_address: 172.100.0.101
    ports:
      - "9092:9092"
      - "29092:29092"

  kafka3:
    image: confluentinc/cp-kafka:latest
    hostname: kafka3
    container_name: kafka3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29093,OUTSIDE://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka3:29093,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENER_NAME_INSIDE: INSIDE
      KAFKA_LISTENER_NAME_OUTSIDE: OUTSIDE
      KAFKA_LISTENER_PORT_INSIDE: 29093
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      kafka-net:
        ipv4_address: 172.100.0.102
    ports:
      - "9093:9093"
      - "29093:29093"

  schema_registry:
    image: confluentinc/cp-schema-registry:6.2.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka-net
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka2:29092'
      SCHEMA_REGISTRY_LISTENERS: http://127.0.0.1:8081
    # Debezium Service (optional)

  debezium:
    image: debezium/connect:2.7.3.Final
    hostname: debezium-container
    container_name: debezium-container
    networks:
      - kafka-net
    ports:
      - "8083:8083"
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - schema_registry
    environment:
      DEBUG: "true"
      BOOTSTRAP_SERVERS: kafka1:29091,kafka2:29092,kafka3:29093  # Connect using all Kafka brokers' internal addresses
      GROUP_ID: debezium-group
      CONFIG_STORAGE_TOPIC: debezium_config
      OFFSET_STORAGE_TOPIC: debezium_offset
      STATUS_STORAGE_TOPIC: debezium_status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_CACHE_SIZE: 1000
      CONNECT_VALUE_CONVERTER_SCHEMAS_CACHE_SIZE: 1000
      CONNECT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      SCHEMA_HISTORY_INTERNAL_KAFKA_TOPIC: schema-changes.mysql_server_history
      SCHEMA_HISTORY_INTERNAL_KAFKA_BOOTSTRAP_SERVERS: kafka1:29091,kafka2:29092,kafka3:29093
  mysql:
    container_name: mysql
    image: mysql:8.0
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 15122004
      MYSQL_USER: phat
      MYSQL_PASSWORD: 15122004
    networks:
      kafka-net:
        ipv4_address: 172.100.0.200
  debezium-ui:
    container_name: debezium-ui
    image: debezium/debezium-ui:1.9
    networks:
      - kafka-net
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CONNECT_URIS=http://debezium-container:8083
    depends_on:
      - debezium

networks:
  kafka-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.100.0.0/16
          gateway: 172.100.0.1